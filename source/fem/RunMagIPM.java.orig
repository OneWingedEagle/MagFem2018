package fem;

import static java.lang.Math.PI;
import static java.lang.Math.abs;

import java.awt.Color;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.DecimalFormat;

import javax.swing.JFrame;

import org.math.plot.Plot2DPanel;

import components.GUI;
import main.Main;
import math.Mat;
import math.MatSolver;
import math.Vect;
import math.util;
import meshFactory.MeshManipulator;

public class RunMagIPM {

	
	private DecimalFormat formatter=new DecimalFormat("0.00");

	private Vect xp;
	int[] nn=new int[1];

	public static void main(String[] args){
		new Main();
	}

	public void runMag(Model model, Main main){
		

		
		if(model.analysisMode==-3){
			POD pod=new POD();
			pod.setMagPOD(model,main);
			return;
		}
		

		boolean villari=false;
		
		//model.m2d=new Model(System.getProperty("user.dir") + "\\bun0.txt");
		//model.m2d.loadFlux(System.getProperty("user.dir") + "\\flux0.txt");

if(villari){
		model.m2d=new Model(System.getProperty("user.dir") + "\\inputs\\mesh\\statFrame2D.txt");


		model.m2d.loadStress("C:\\Works\\proj8\\resultsShrink3DLamin\\stressLamins\\stress2D"+24+".txt");
		
		int[] ir1={1,2};
		int[] ir2={8,16};
		for(int k=0;k<ir1.length;k++){
			int ix=0;
			for(int i=model.region[ir2[k]].getFirstEl(); i<model.region[ir2[k]].getLastEl();i++)
			{
				
				model.element[i].setDeformable(true);
				Vect ss=model.m2d.getStress(model.region[ir1[k]].getFirstEl()+ix);
				model.element[i].setStress(ss);
				
				ix++;
			}
		}
	
	}
		
			String folder=model.resultFolder;


			int nTsteps=model.nTsteps;
		
			
			int nBegin=model.nBegin;
			int nEnd=model.nEnd;
			

			int inc=model.nInc;

			Vect T=new Vect(nTsteps);
			
			
			Vect time=new Vect(nTsteps);

			
			Vect Vn=new Vect(nTsteps);
			double[][] Is=new double[5][nTsteps];

			double[][] Vf=new double[4][nTsteps];
			double[][] Vs=new double[4][nTsteps];
	
			//******************************
			int width = GUI.screenWidth;
			int height = GUI.screenHeight;
		
			 Plot2DPanel[] plot = new Plot2DPanel[4];
			 JFrame[] frame = new JFrame[4];
			 
		boolean plotter=false;
			 
			 if(plotter){
				 
			 double[][] XY=new double[1][2];
			
			 int hh=40;
			 
			 for(int i=0;i<plot.length;i++){
				plot[i]=new Plot2DPanel();
			 
			 }

			 plot[0].addLinePlot("Ia", Color.red, XY);
			 plot[0].addLinePlot("Ib", Color.green, XY);
			 plot[0].addLinePlot("Ic", Color.blue, XY);
			 plot[0].addLinePlot("sumI", Color.black, XY);
				plot[0].setFixedBounds(0,0,50);
				plot[0].setFixedBounds(1,-10,10);

			   frame[0] = new JFrame("Currents");
			   frame[0].setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
			  frame[0].setSize(width/3,height/3);
			  frame[0].setContentPane(plot[0]);
			  frame[0].setLocation(width/3,height/3-hh);
			
			  
				plot[1] = new Plot2DPanel();
	
				plot[1].addLinePlot("Va", Color.red, XY);
				plot[1].addLinePlot("Vb", Color.green, XY);
				plot[1].addLinePlot("Vc", Color.blue, XY);
				plot[1].addLinePlot("Vfa", Color.cyan, XY);
				plot[1].addLinePlot("Vfb", Color.pink, XY);
				plot[1].addLinePlot("Vfc", Color.gray, XY);
					plot[1].setFixedBounds(0,0,50);
					plot[1].setFixedBounds(1,-100,100);

				 frame[1] = new JFrame("Voltages");
				  frame[1].setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
					 frame[1].setSize(width/3,height/3);
				 frame[1].setContentPane(plot[1]);
				 frame[1].setLocation(2*width/3,height/3-hh);

		
				  
				   plot[2] = new Plot2DPanel();
			
					 plot[2].addLinePlot("Torque", Color.red, XY);
					
						plot[2].setFixedBounds(0,0,50);
						plot[2].setFixedBounds(1,-50,50);
						

					   frame[2] = new JFrame("Torque");
					   frame[2].setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
					  frame[2].setSize(width/3,height/3);
					  frame[2].setContentPane(plot[2]);
					  frame[2].setLocation(width/3,2*height/3-hh);

			  
					   plot[3] = new Plot2DPanel();
						
						 plot[3].addLinePlot("Vg", Color.red, XY);
						
							plot[3].setFixedBounds(0,0,50);
							plot[3].setFixedBounds(1,-1.2,1.2);
							
						  frame[3] = new JFrame("Vg");
						  frame[3].setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
						 frame[3].setSize(width/3,height/3);
						 frame[3].setContentPane(plot[3]);
						 frame[3].setLocation(2*width/3,2*height/3-hh);

			 }
						  
						 boolean dynamicGrapph=plotter && true;
						  
						  if(dynamicGrapph){
						  
						  frame[0].setVisible(true);
						 frame[1].setVisible(true);
						  frame[2].setVisible(true);

						 frame[3].setVisible(true);
						  }

			  //*******************************
			  
			

			double kme;

			kme=0.25;
										
			if(model.loadPrevMag){
				
				model.setMagBC();
				
				String initfile = System.getProperty("user.dir")+"\\initxMag.txt";
				model.loader.loadPrevMag(model,initfile);

				}
			

			// log mode: 0: instantaneous torque, 1: average torque vs. beta, 2: emfs

			int logMode=0;
	
			double tet=model.tet,tetp=model.tetp,tetpp=model.tetpp;

			double dt=model.dt;

		
			double dx=0,dxp=0,dang=0;

			double elAng, mechAng, elAngStep,mechAngStep;

			int nSamples=0;

			
			mechAngStep=model.rotStep;
			
			elAngStep=mechAngStep/kme;

			
		double elAng0=0;
			
			if(!model.circuit) elAng0=280;
			//if(model.circuit) elAng0=0;

			//elAng0=0;
			
			double mechAng0=0;
	
					
			double[] Ap=new double[1];
			double[] An=new double[1];

			if(logMode==2)
			{
				Ap=new double[1+model.numberOfElements];
				An=new double[1+model.numberOfElements];
			}


			if(model.loadFlux) {model.magAnalysis=false;}

			
			String dispFolder="";
			String fluxFolder="";

		

			if(model.saveForce){
			
					dispFolder = System.getProperty("user.dir")+"\\forces";
				File dfolder = new File(dispFolder);
				if(dfolder.exists())
					util.deleteDir(dfolder);
				dfolder.mkdir();

			}
			
			if(model.saveFlux){
				
				fluxFolder = System.getProperty("user.dir")+"\\fluxes";
			File dfolder = new File(fluxFolder);
			if(dfolder.exists())
				util.deleteDir(dfolder);
			dfolder.mkdir();

		}



			
			if(nTsteps>1)
				model.writeFiles=false;
			else
				model.writeFiles=true;

			boolean writeFiles=model.writeFiles;
			
			
			Vect x=new Vect();

			main.gui.lbX[0].setText("rot ang. ");
			main.gui.lbX[1].setText("Trq. ");

			//	if(model.analysisMode>=0) magAnalysis=true;


			double omega=2*PI*model.freq;
			

			boolean snap=true;

			int D=90;
			Mat W=new Mat();

			if(snap){
				
				model.setMagBC();
				W=new Mat(model.numberOfUnknowns,D);

			}

			int nM=8;

			
		for(int m=0;m<=1*nM;m++){
			


				if(logMode!=1)
					if(m!=0*nM) continue;

				//main.gui.tfX[2].setText(Integer.toString(m)+"/"+(nM)+":"+tav);

				nSamples=0;
				mechAng=mechAng0;
				elAng=elAng0;

				int ix=-1;

				for(int i=nBegin;i<=nEnd;i+=inc){
					
					ix++;  
				
					nSamples++;
					double beta=m*.5/nM*PI;

					elAng=elAng0+i*elAngStep;

					double tets=(mechAng0+i*mechAngStep)*PI/180;
					
						dxp=dx;

						dx=dxp+1e-3*(model.TrqZ-1*9.5*(1-Math.exp(-ix*.05)));
					
			

						tetpp=tetp;
						tetp=tet;
						
						double dTr=(model.TrqZ-10)+20*(tets-tet);
						
						if( !model.loadPrevMag) 
							tet=tets;			
					
						
		
						
						tet=tets;
					
						
						mechAng=mechAng0+i*mechAngStep;
						
				model.spwmLevel=.9;
					main.gui.tfX[0].setText((i)+"/"+nEnd);

					//elAngRad=elAng*PI/180;	

				model.setBeta(beta);
					
				double t0=0;
				if(omega>0)
				t0=(elAng0)/180*PI/omega;
				
				
					model.setJ(t0+i*model.dt);	
					if(abs(mechAng)>0 && model.rotateRotor && model.nRotReg>0){

						model.resetMotor();
						model.setRotorPosition(mechAng);	
					//	model.setRotorIndex(i);
					}
				

					if(model.magAnalysis){
				
						
							model.setMagBC();
							
							if(i==nBegin){
							if(main.console)
								io.Console.redirectOutput(main.gui.paramArea);
							model.reportData();
							if(main.console)
								io.Console.redirectOutput(main.gui.progressArea);
							}
							
	
							if(!model.nonLin || i==nBegin){
								
							
									if(!model.loadPrevMag){
										model.saveAp();		

										// x=new Vect(model.numberOfUnknowns);

										x=model.solveMagLin(i);	

									}
									else
									{
										Vect vk=model.getUnknownA();

								
										 x=new Vect(model.numberOfUnknowns);
										for(int j=0;j<vk.length;j++){
											x.el[j]=vk.el[j];
										}
										for(int j=0;j<model.numberOfUnknownCurrents;j++){
											int nr=model.unCurRegNumb[j];
											x.el[vk.length+j]=model.region[nr].current;

										}
										if(model.nNeutral>0)
										x.el[vk.length+model.numberOfUnknownCurrents]=model.vNeutral;
									}

								}
								else
									x=this.xp;
								
							if(model.coupled){

								model.solveCoupled(x);
							}
							
							else if(model.nonLin ){

									
									if(model.analysisMode>0 && i!=nBegin )	{	
								
										model.saveAp();				
									}
						
									
									x=model.solveNonLinear(x,true,i-nBegin);
									
								}

					/*	if(model.analysisMode>0)
							model.setJe();*/
						
						if(snap && ix<D)
						W.setCol(x, ix);

						
							this.xp=x.deepCopy();

							if(model.saveFlux){
								String fluxFile = fluxFolder+"\\flux"+i+".txt";
							
								model.writeB(fluxFile);
								String meshFile = fluxFolder+"\\bun"+i+".txt";
								
								model.writeMesh(meshFile);
		
							}


							util.pr(" >>>>>>>>>> Bmax >>>>>>>"+model.Bmax);

						model.resetReluctForce();
						model.setReluctForce();

						
						model.setMSForce();

						
				}

					else if(model.loadFlux)

					{	
					
					//	String fluxFile = System.getProperty("user.dir")+"\\flux-0-1800CalfineOK\\flux"+i+".txt";

						String fluxFile = model.fluxFolderIn+"\\flux"+i+".txt";
						

							model.loadFlux(fluxFile,0);

							model.setReluctForce();
							
							int ir=8;
							for(int ie=model.region[ir].getFirstEl();ie<=model.region[ir].getLastEl();ie++){
								model.element[ie].setDeformable(true);
								//model.element[ie].getStress().hshow();
							}

							model.setMSForce();
							
						
							String stressFile = model.resultFolder+"\\stressMS"+i+".txt";
							
							model.writeStress(stressFile);
							
						

					
					}
					else if(model.loadPotentioal) {

						String vPot = System.getProperty("user.dir")+"\\flux\\vPot"+i+".txt";
						model.loadPotential(vPot);
						model.setB();

					}
					
			
					
					folder=System.getProperty("user.dir") + "\\results";
			
					if(model.dim==2)
						model.setTorque(0,model.rm,1);
						else
							model.setTorque(model.r1,1,1);

					
					
					util.pr("torque >>>>>>>"+model.TrqZ);
			
				T.el[ix]=model.TrqZ;

		
				if(ix>0)
					time.el[ix]=dt+time.el[ix-1];

				if(model.motor){
		
				double sumI=0,sumVs=0,sumVf=0;
					for(int j=0;j<1*model.numberOfUnknownCurrents;j++){
					
						int nr=model.unCurRegNumb[j];
						Is[j+1][ix]=1*model.region[nr].current;
						sumI+=model.region[nr].current;
						Vs[j+1][ix]=1*model.region[nr].terminalVoltage;
						sumVs+=model.region[nr].terminalVoltage;
						Vf[j+1][ix]=1*model.region[nr].inducedVoltage;
						sumVf+=model.region[nr].inducedVoltage;					
							
					}

				/*	Vs[ix][1]=1*model.region[9].terminalVoltage-model.region[11].terminalVoltage;
					Vs[ix][2]=1*model.region[11].terminalVoltage-model.region[13].terminalVoltage;
					Vs[ix][3]=1*model.region[13].terminalVoltage-model.region[9].terminalVoltage;*/


					int n1=9,n2=11,n3=13;
					
					if(model.numberOfRegions==8)
					{
						n1=1;n2=3;n3=5;
					}
					else
						if(model.numberOfRegions==4){
							n1=2;n2=2;n3=2;
						}
						
					Is[1][ix]=model.region[n1].current;
					Is[2][ix]=model.region[n2].current;
					Is[3][ix]=model.region[n3].current;

					Is[Is.length-1][ix]=sumI;

				//	Vn.el[ix]=model.vNeutral;
					
					Is[0][ix]=ix;
					Vs[0][ix]=ix;
					Vf[0][ix]=ix;
		
					double tetx=(elAng-elAng0)*kme-mechAng;

 
					Vn.el[ix]=Math.sin(tetx/180*PI/kme*2);
		
				
					if(logMode==2 && !model.circuit){

						for(int ie=1;ie<=model.numberOfElements;ie++){
							Ap[ie]=An[ie];
							An[ie]=model.getElement2DA(ie);
							
						}
						
						int[][] rg1={{9,10,11,12},{13,14,15,16},{17,18,19,20}};
						//	int[][] rg2={{10,11,12,13},{14,15,16,17},{18,19,20,21}};
						int[][] rg2={{15,16,17,18},{19,20,21,22},{23,24,25,26}};
						int[][] rg3={{9,10},{11,12},{13,14}};
						int[][] rg4={{1,2},{3,4},{5,6}};
						int[][] rg5={{2,0},{2,0},{2,0}};
						int[][] rg=new int[1][1];
						if(model.numberOfRegions==23) rg=rg1;
						else 	if(model.numberOfRegions==30) rg=rg2;
						else 	if(model.numberOfRegions==8) rg=rg4;
						else if(model.numberOfRegions==4) rg=rg5;
						else rg=rg3;
						double emfx=0;
						double[] emf=new double[3];
						double sr=0,se=0;

						for(int ip=0;ip<3;ip++)
							for(int kk=0;kk<rg[0].length;kk++){
								int ir=rg[ip][kk];
								if(ir==0) continue;
								double nLoop=model.region[ir].nloop;

									
								emfx=0;
								sr=0;

								for(int n=model.region[ir].getFirstEl();n<=model.region[ir].getLastEl();n++){						
									
									 se=model.getElementArea(n);

									 sr+=se;			
									 emfx+=(An[n]-Ap[n])*se/model.dt;
			
							}

			
								if(kk<rg[0].length/2)
									emf[ip]+=emfx*nLoop*model.height/sr;
								else
									emf[ip]-=emfx*nLoop*model.height/sr;
								
								

								
									}
								
						Vf[1][ix]=emf[0];
						Vf[2][ix]=emf[1];
						Vf[3][ix]=emf[2];


						
						
						Vs[1][ix]=Vf[1][ix]+model.region[rg[0][0]].getWireRes()*model.region[rg[0][0]].current;
						Vs[2][ix]=Vf[2][ix]+model.region[rg[1][0]].getWireRes()*model.region[rg[1][0]].current;

						Vs[3][ix]=Vf[3][ix]+model.region[rg[2][0]].getWireRes()*model.region[rg[2][0]].current;

						
						
				
					}

				}
					//************************************************
							

					if(plotter){
					
						 double w1=-1e10,w2=1e-10;
						 
						double[][] XY=new double[ix][2];
						for(int j=0;j<ix;j++){

							XY[j][0]=j;
							XY[j][1]=Is[1][j];
							
					
							if(abs(XY[j][1])>w1) w1=abs(XY[j][1]);
						}
						plot[0].changePlotData(0, XY);

						XY=new double[ix][2];
						for(int j=0;j<ix;j++){

							XY[j][0]=j;
							XY[j][1]=Is[2][j];
							if(abs(XY[j][1])>w1) w1=abs(XY[j][1]);
						}
						plot[0].changePlotData(1, XY);

						XY=new double[ix][2];
						for(int j=0;j<ix;j++){

							XY[j][0]=j;
							XY[j][1]=Is[3][j];
							if(abs(XY[j][1])>w1) w1=abs(XY[j][1]);
						}
						plot[0].changePlotData(2, XY);

						XY=new double[ix][2];
						for(int j=0;j<ix;j++){

							XY[j][0]=j;
							XY[j][1]=Is[4][j];
							if(abs(XY[j][1])>w1) w1=abs(XY[j][1]);
						}
						plot[0].changePlotData(3, XY);
						
						plot[0].setFixedBounds(0,0,50*(1+ix/50));

						double mx=1.2*Math.max(w1,w2);
						
									
						//************************************************
						
						
						  w1=-1e10;
						  w2=1e-10;
						 
						XY=new double[ix][2];
						for(int j=0;j<ix;j++){

							XY[j][0]=j;
							XY[j][1]=Vs[1][j];
							if(abs(XY[j][1])>w1) w1=abs(XY[j][1]);
						}
						plot[1].changePlotData(0, XY);

						XY=new double[ix][2];
						for(int j=0;j<ix;j++){

							XY[j][0]=j;
							XY[j][1]=Vs[2][j];
							if(abs(XY[j][1])>w1) w1=abs(XY[j][1]);
						}
						plot[1].changePlotData(1, XY);

						XY=new double[ix][2];
						for(int j=0;j<ix;j++){

							XY[j][0]=j;
							XY[j][1]=Vs[3][j];
							if(abs(XY[j][1])>w1) w1=abs(XY[j][1]);
						}
						plot[1].changePlotData(2, XY);

						XY=new double[ix][2];
						for(int j=0;j<ix;j++){

							XY[j][0]=j;
							XY[j][1]=Vf[1][j];
							if(abs(XY[j][1])>w1) w1=abs(XY[j][1]);
						}
						plot[1].changePlotData(3, XY);

						XY=new double[ix][2];
						for(int j=0;j<ix;j++){

							XY[j][0]=j;
							XY[j][1]=Vf[2][j];
							if(abs(XY[j][1])>w1) w1=abs(XY[j][1]);
						}
						plot[1].changePlotData(4, XY);

						XY=new double[ix][2];
						for(int j=0;j<ix;j++){

							XY[j][0]=j;
							XY[j][1]=Vf[3][j];
							if(abs(XY[j][1])>w1) w1=abs(XY[j][1]);
						}
						plot[1].changePlotData(5, XY);
						
						plot[1].setFixedBounds(0,0,50*(1+ix/50));


						
						//************************************************
						
						
						  w1=-1e10;
						  w2=1e-10;
						 
						XY=new double[ix][2];
						for(int j=0;j<ix;j++){

							XY[j][0]=j;
							XY[j][1]=T.el[j];
							if(abs(XY[j][1])>w1) w1=abs(XY[j][1]);
						}
						plot[2].changePlotData(0, XY);

						plot[2].setFixedBounds(0,0,50*(1+ix/50));
						 mx=1.2*Math.max(w1,w2);
						//plot[2].setFixedBounds(1,-mx,mx);
						
						//************************************************
						
						
						
						//************************************************
						
						
						  w1=-1e10;
						  w2=1e-10;
						 
						XY=new double[ix][2];
						for(int j=0;j<ix;j++){

							XY[j][0]=j;
							XY[j][1]=Vn.el[j];
							if(abs(XY[j][1])>w1) w1=abs(XY[j][1]);
						}
						plot[3].changePlotData(0, XY);
						
						plot[3].setFixedBounds(0,0,50*(1+ix/50));

						 mx=1.2*Math.max(w1,w2);
						 mx=400;
						//plot[3].setFixedBounds(1,-mx,mx);
						
						//************************************************
						
					}						
					
								//************************************************
				//	writeFiles=true;


					if( writeFiles /*&& i==nEnd*/){

						model.writeMesh( folder+"\\bun"+i+".txt");
						String fluxFile =  folder+"\\flux"+i+".txt";
						model.writeB(fluxFile);
						
						String forceFile =folder+"\\force"+i+".txt";
						model.writeNodalField(forceFile,model.forceCalcMode);

					
					}

					if(model.saveForce){
					//	String dispFile =dispFolder+"\\force"+mangs+".txt";
						String forceFile =dispFolder+"\\force"+i+".txt";
						model.writeNodalField(forceFile,model.forceCalcMode);
					}


					main.gui.tfX[1].setText(this.formatter.format(model.TrqZ));
				//	main.gui.tfX[2].setText(this.formatter.format(model.spwmLevel));
					main.gui.tfX[2].setText(this.formatter.format(dang/PI*180));

					if(model.solver.terminate){

						break;
					}

			if(model.solver.terminate) break;

			}
			

		}
			
			boolean writeInit=false;
			
			if(writeInit){
		
		
			String initfile = System.getProperty("user.dir")+"\\initxMag.txt";
			double[][] arr=new double[model.numberOfUnknowns+1+1][2];
			
			Vect vk=model.getUnknownA();

			Vect vp=model.getUnknownAp();

			for(int j=0;j<vp.length;j++){
				arr[j][0]=vp.el[j];
				arr[j][1]=vk.el[j];
			}
			

			for(int i=0;i<model.numberOfUnknownCurrents;i++){

				int nr=model.unCurRegNumb[i];
				
				arr[i+vp.length][0]=model.region[nr].currentp;
				arr[i+vp.length][1]=model.region[nr].current;


			}

			arr[arr.length-2][0]=model.vNeutral;
			arr[arr.length-2][1]=tet;
			
			arr[arr.length-1][0]=tetp;
			arr[arr.length-1][1]=tetpp;



			model.writer.writeArray(arr,initfile);
		
			}
			
			if(snap){
				String solutions=System.getProperty("user.dir") +"\\solutions.txt";
				model.writer.writeArray(W.el, solutions);
			}

			util.plot(time,T);
			

	
<<<<<<< HEAD
				T.show();
=======
			T.show();
>>>>>>> Mag POD very good results
				
				Vect errs=new Vect(model.solver.totalIter);
				
				util.pr(model.solver.totalIter);
				for(int i=0;i<errs.length;i++)
					errs.el[i]=model.solver.errs.get(i);
				
				//util.plot(errs);
			//	time.show();

				//util.pr("-----");
				//util.pr(T.sum()/T.length);
		
		
				
				if(logMode==2){
					
					String def = System.getProperty("user.dir") + "//uu"+model.defMode+".txt";
					String Trq = System.getProperty("user.dir") + "//torque.txt";
					
					String si="I";
					String sv="V";
					String s="";
					if(model.circuit) s=si;
					else
						s=sv;

					String emf1 = System.getProperty("user.dir") + "//emf//"+s+"a.txt";
					String emf2 = System.getProperty("user.dir") + "//emf//"+s+"b.txt";
					String emf3 = System.getProperty("user.dir") + "//emf//"+s+"c.txt";
					

					try {

						PrintWriter pwu=new PrintWriter(new BufferedWriter(new FileWriter(def)));
						PrintWriter pwt=new PrintWriter(new BufferedWriter(new FileWriter(Trq)));
						PrintWriter pwem1=new PrintWriter(new BufferedWriter(new FileWriter(emf1)));
						PrintWriter pwem2=new PrintWriter(new BufferedWriter(new FileWriter(emf2)));
						PrintWriter pwem3=new PrintWriter(new BufferedWriter(new FileWriter(emf3)));

					

					
			
						pwem1.println("t    f(t)");
						pwem1.println("begin");
						
						pwem2.println("t    f(t)");
						pwem2.println("begin");
					
						pwem3.println("t    f(t)");
						pwem3.println("begin");
					
					if(!model.circuit){
						Vs[1][0]=Vs[1][nTsteps-1];
						Vs[2][0]=Vs[2][nTsteps-1];
						Vs[3][0]=Vs[3][nTsteps-1];
					}
						

						double ft1=0,ft2=0,ft3=0;
					for(int i=0;i<nTsteps;i++){
					double t=Vs[0][i]*model.dt;
					if(model.circuit){
						 ft1=Is[1][i];
						 ft2=Is[2][i];
						 ft3=Is[3][i];
					}
					else{
					 ft1=Vs[1][i];
					 ft2=Vs[2][i];
					 ft3=Vs[3][i];
					}
					


					pwem1.println(t+"  "+ft1);
					
					pwem2.println(t+"  "+ft2);
					
					pwem3.println(t+"  "+ft3);
					}

					pwem1.println("end");
					
					pwem2.println("end");
					
					pwem3.println("end");
					

			pwu.close();
			pwt.close();
			pwem1.close();
			pwem2.close();		
			pwem3.close();


		} catch (IOException exception) {
			// TODO Auto-generated catch-block stub.
			exception.printStackTrace();
		}
				}



	}

	
		


}
